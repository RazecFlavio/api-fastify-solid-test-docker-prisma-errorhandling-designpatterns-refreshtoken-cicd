npm init -y
npm i typescript @types/node tsx tsup -D
npx tsc --init    =>  no tsconfig.json -> "target": "ES2020",   

npm i fastify
criar o App em dois arquivos app e server, futuramente será utilizando nos testes;

scripts package.json
criar arquivo .npmrc   => para que quando vc rodar o npm i ele fixa a versao dos pacotes.

criar variavel ambiente -> arquivo  .env
npm i dotenv

criar pasta env
npm i eslint @rocketseat/eslint-config -D

criar arquivo .eslintrc.json
criar arquivo .prettierrc.json
criar arquivo .eslintignore

no arquivo tsconfig.json -> 
    "baseUrl": "./",
     "paths": {
      "@/*": ["./src/*"]
     }, 

nessas duas opções acima conseguimo definir os alias.

npm i prisma -D
npx prisma init -> cria o arquivo schemaprisma

npx prisma generate -> cria a tipagem das tabelas
npm i @prisma/client

apos instalar o docker rodar o comando abaixo para subir a imagem no docker ja com um usuario criado. neste caso o usuario é o "docker"
docker ps -a   ===> lista todos os containers
docker start + nome ou id;
docker stop + nome ou id;
docker rm + nome ou id; remover
docker logs -f ===> -f mantem o log aberto


docker run --name api-solid-pg -e POSTGRESQL_USERNAME=docker -e POSTGRESQL_PASSWORD=docker -e POSTGRESQL_DATABASE=apisolid -p 5433:5432 bitnami/postgresql

com o banco online

npx prisma migrate dev   => gerar o que precisa no nosso banco de dados

criar arquivo docker-compose.yml apos a criação do arquivo.... executar o comando abaixo para subir as imagens.

docker compose up -d    => monta todos os serviços da aplicação.
docker compose stop     => stopa o container.
docker compose down     => deleta os containers, apaga todas as informações.

npm i bcryptjs                      => biblioteca para hash de senha
npm i --save-dev @types/bcryptjs    => tipos typescript



Design patterns => Centralizar ações. se eu crio algo pego rota, caso eu preciso criar a mesma coisa por um outro lugar. a criação desta coisa precisa estar em um local isolado.

1 - repository patterns      => Consiste em criar uma classe por tabela e dentro desta classe ter as ações que serao feitas naquela tabela...Insert, updates, selects, deletes e .....

Principios SOLID 

1 - Dependency Inversion Principle - Interface - contratos


INICIANDO TESTES
npm i vitest vite-tsconfig-paths -D 
criar arquivo vite.config.ts

npm run test:coverage => relatorios de todos os arquivos do sistema e destaca quais e quantas vezes cada linha foi testada.

npm i @vitest/ui -D => igual coverage porem em UI.

Fluxo de criação de uma funcionalidade
1 - usecase
2 - error handling
3 - teste unitario
4 - camada externa

factory patterns
criação da pasta factories dentro do usecase


TDD => Test driven development -> Desenvolvimento dirigido a teste.

// red - primeiro estado => assim que a gente cria nosso teste sem a funcionalidade estar implementada.
// green - codar o minimo necessario para o teste passar
// refactor - desenvolver o usecase.


npm i dayjs         => trabalhar com datas.

token jwt -> composto por 3 coisas -> header, payload, signature

criar arquivo fastify-jwt.d.ts

criar dentro da pasta prisma vitest-environment-prisma

criar atributo test no arquivo vite.config.ts


dentro da pasta: prisma\vitest-environment-prisma digita =>>>>> npm link


na pasta raiz do projeto digita :===>  npm link vitest-environment-prisma
npm i --save-dev npm-run-all

para criar os scripts no arquivo package.json


inicinaod E2E ==> biblioteca para realizar solicitações http sem precisar subir a aplicação.
npm i supertest -D
npm i @types/supertest -D


aplicando refreshToken
npm i @fastify/cookie

adicionar no app.ts o register do fastifycookie


CI - continuous Integration
- ferramenta Github actions

criar pasta .Github/wrokflows e os arquivos

CD - continuous Delivery/Deployment